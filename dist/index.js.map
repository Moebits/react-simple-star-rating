{"version":3,"file":"index.js","sources":["../src/components/StarIcon.tsx","../src/reducer.ts","../src/components/Rating.tsx","../node_modules/style-inject/dist/style-inject.es.js"],"sourcesContent":["import React from 'react'\n\nexport interface StarIconProps {\n  /** Icon width / height in `px` */\n  size?: number\n  SVGstrokeColor?: string\n  SVGstorkeWidth?: string | number\n  SVGclassName?: string\n  SVGstyle?: React.CSSProperties\n}\n\nexport function StarIcon({\n  size = 25,\n  SVGstrokeColor = 'currentColor',\n  SVGstorkeWidth = 0,\n  SVGclassName = 'star-svg',\n  SVGstyle\n}: StarIconProps) {\n  return (\n    <svg\n      className={SVGclassName}\n      style={SVGstyle}\n      stroke={SVGstrokeColor}\n      fill='currentColor'\n      strokeWidth={SVGstorkeWidth}\n      viewBox='0 0 24 24'\n      width={size}\n      height={size}\n      xmlns='http://www.w3.org/2000/svg'\n    >\n      <path d='M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z'></path>\n    </svg>\n  )\n}\n","type State = {\n  ratingValue: number | null\n  hoverValue: number | null\n  hoverIndex: number\n  valueIndex: number\n}\n\ntype Action =\n  | { type: 'PointerMove'; payload: number | null; index: number }\n  | { type: 'PointerLeave' }\n  | { type: 'MouseClick'; payload: number }\n\nexport function reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case 'PointerMove':\n      return {\n        ...state,\n        hoverValue: action.payload,\n        hoverIndex: action.index\n      }\n\n    case 'PointerLeave':\n      return {\n        ...state,\n        ratingValue: state.ratingValue,\n        hoverIndex: 0,\n        hoverValue: null\n      }\n\n    case 'MouseClick':\n      return {\n        ...state,\n        valueIndex: state.hoverIndex,\n        ratingValue: action.payload\n      }\n\n    default:\n      return state\n  }\n}\n","import {\n  useMemo,\n  useReducer,\n  useCallback,\n  Fragment,\n  ReactNode,\n  CSSProperties,\n  MouseEvent,\n  PointerEvent,\n  useEffect\n} from 'react'\nimport { StarIcon, StarIconProps } from './StarIcon'\nimport { reducer } from '../reducer'\nimport css from '../style.module.css'\n\nexport interface RatingProps extends StarIconProps {\n  /** Handles the returned rating value */\n  onClick?: (value: number, index: number, event?: MouseEvent<HTMLSpanElement>) => void\n  /** onPointerMove callback function with `hover`, `index` alongside `event` values passed */\n  onPointerMove?: (value: number, index: number, event: PointerEvent<HTMLSpanElement>) => void\n  /** onPointerEnter callback function */\n  onPointerEnter?: (event: PointerEvent<HTMLSpanElement>) => void\n  /** onPointerLeave callback function */\n  onPointerLeave?: (event: PointerEvent<HTMLSpanElement>) => void\n  /** Set initial value */\n  initialValue?: number\n  /** Number of the icons */\n  iconsCount?: number\n  /** Read only mode */\n  readonly?: boolean\n  /** Add a group of icons */\n  customIcons?: {\n    icon: ReactNode\n  }[]\n  /** RTL mode */\n  rtl?: boolean\n  /** Enable a fractional rate (half icon) */\n  allowFraction?: boolean\n  /** Enable unconstrained fractions */\n  fullFraction?: boolean\n  /** Multiply the default value by this amount */\n  multiplier?: number\n  /** Enable / Disable hover effect on empty icons */\n  allowHover?: boolean\n  /** Enable / Disable hover effect on filled icons */\n  disableFillHover?: boolean\n  /** Enable / Disable transition effect on mouse hover */\n  transition?: boolean\n  /** Applied to the `main` span */\n  className?: string\n  /** Inline style applied to the `main` span */\n  style?: CSSProperties\n\n  /** Custom fill icon SVG */\n  fillIcon?: ReactNode | null\n  /** Filled icons color */\n  fillColor?: string\n  /** Array of string to add color range */\n  fillColorArray?: string[]\n  /** Inline style applied to `filled-icons` icon span  */\n  fillStyle?: CSSProperties\n  /** Filled icons `span` className */\n  fillClassName?: string\n\n  /** Custom empty icon SVG */\n  emptyIcon?: ReactNode | null\n  /** Empty icons color */\n  emptyColor?: string\n  /** Inline style applied to `empty-icons` span  */\n  emptyStyle?: CSSProperties\n  /** ٌُEmpty icons `span` className */\n  emptyClassName?: string\n\n  /** Enable / Disable HTML`title` Tag */\n  allowTitleTag?: boolean\n  /** Show a tooltip with live values */\n  showTooltip?: boolean\n  /** Initial tooltip text if there is no rating value */\n  tooltipDefaultText?: string\n  /** Array of strings that will show inside the tooltip */\n  tooltipArray?: string[]\n  /** Inline style applied to the `tooltip` span */\n  tooltipStyle?: CSSProperties\n  /** Tooltip CSS className */\n  tooltipClassName?: string\n  /** Separator word in a title of a rating star `(1 out of 5)` */\n  titleSeparator?: string\n}\n\n/**\n * Check for touch devices\n * @returns `boolean`\n */\nfunction isTouchDevice() {\n  return (\n    (typeof window !== 'undefined' && window.matchMedia('(pointer: coarse)').matches) ||\n    'ontouchstart' in window ||\n    (typeof navigator !== 'undefined' && navigator.maxTouchPoints > 0)\n  )\n}\n\nexport function Rating({\n  onClick,\n  onPointerMove,\n  onPointerEnter,\n  onPointerLeave,\n  initialValue = 0,\n  iconsCount = 5,\n  size = 40,\n  readonly = false,\n  rtl = false,\n  customIcons = [],\n  allowFraction = false,\n  fullFraction = false,\n  multiplier = 1,\n  style,\n  className = 'react-simple-star-rating',\n  transition = false,\n\n  allowHover = true,\n  disableFillHover = false,\n\n  fillIcon = null,\n  fillColor = '#ffbc0b',\n  fillColorArray = [],\n  fillStyle,\n  fillClassName = 'filled-icons',\n\n  emptyIcon = null,\n  emptyColor = '#cccccc',\n  emptyStyle,\n  emptyClassName = 'empty-icons',\n\n  allowTitleTag = true,\n  showTooltip = false,\n  tooltipDefaultText = 'Your Rate',\n  tooltipArray = [],\n  tooltipStyle,\n  tooltipClassName = 'react-simple-star-rating-tooltip',\n\n  SVGclassName = 'star-svg',\n  titleSeparator = 'out of',\n  SVGstyle,\n  SVGstorkeWidth = 0,\n  SVGstrokeColor = 'currentColor'\n}: RatingProps) {\n  const [{ ratingValue, hoverValue, hoverIndex, valueIndex }, dispatch] = useReducer(reducer, {\n    hoverIndex: 0,\n    valueIndex: 0,\n    ratingValue: initialValue,\n    hoverValue: null\n  })\n\n  useEffect(() => {\n    if (initialValue) dispatch({ type: 'MouseClick', payload: 0 })\n  }, [initialValue])\n\n  const totalIcons = useMemo(() => (allowFraction ? iconsCount * 2 : iconsCount), [allowFraction, iconsCount])\n\n  // Convert local rating value to precentage\n  const localRating = useMemo(() => {\n    if (multiplier) initialValue /= multiplier\n    if (initialValue > totalIcons) return 0\n\n    // Check for a decimal value\n    if (!allowFraction && Math.floor(initialValue) !== initialValue) {\n      return Math.ceil(initialValue) * 2 * 10\n    }\n\n    if (fullFraction) return (initialValue / iconsCount) * 100\n    return Math.round((initialValue / iconsCount) * 100)\n  }, [allowFraction, initialValue, iconsCount, totalIcons])\n\n  const localRatingIndex = useMemo(() => (allowFraction ? initialValue * 2 - 1 : initialValue - 1) || 0, [\n    allowFraction,\n    initialValue\n  ])\n\n  const renderValue = useCallback(\n    (value: number) => {\n      let val = (iconsCount % 2 !== 0 ? value / 2 / 10 : (value * iconsCount) / 100)\n      if (multiplier !== 1) return Math.round(val * multiplier)\n      return val\n    },\n    [iconsCount]\n  )\n\n  const handlePointerMove = (event: PointerEvent<HTMLSpanElement>) => {\n    const { clientX, currentTarget } = event\n    // Get main span element position and width\n    const { left, right, width } = currentTarget.children[0].getBoundingClientRect()\n\n    // Handle RTL\n    let positionX = rtl ? right - clientX : clientX - left\n    if (positionX > width) positionX = width\n\n    // Get current pointer position while moves over the icons\n    let currentValue = totalIcons\n    const iconWidth = Math.round(width / totalIcons)\n\n    for (let i = 0; i <= totalIcons; i = i + 1) {\n      if (positionX <= iconWidth * i) {\n        if (i === 0 && positionX < iconWidth) currentValue = 0\n        else currentValue = i\n        break\n      }\n    }\n\n    const index = currentValue - 1\n\n    if (currentValue > 0) {\n      // Set value and index state\n      if (fullFraction) {\n        dispatch({ type: 'PointerMove', payload: (positionX * 100) / width, index })\n      } else {\n        dispatch({ type: 'PointerMove', payload: (currentValue * 100) / totalIcons, index })\n      }\n\n      if (onPointerMove) {\n        if (hoverValue) onPointerMove(renderValue(hoverValue), index, event)\n      }\n    }\n  }\n\n  const handlePointerEnter = (event: PointerEvent<HTMLSpanElement>) => {\n    if (onPointerEnter) onPointerEnter(event)\n    // Enable only on touch devices\n    if (!isTouchDevice()) return\n\n    handlePointerMove(event)\n  }\n\n  const handleClick = (event?: MouseEvent<HTMLSpanElement>) => {\n    if (hoverValue) {\n      dispatch({ type: 'MouseClick', payload: hoverValue })\n      if (onClick) onClick(renderValue(hoverValue), hoverIndex, event)\n    }\n  }\n\n  const handlePointerLeave = (event: PointerEvent<HTMLSpanElement>) => {\n    if (isTouchDevice()) handleClick()\n\n    dispatch({ type: 'PointerLeave' })\n    if (onPointerLeave) onPointerLeave(event)\n  }\n\n  const valuePercentage = useMemo(() => {\n    if (allowHover) {\n      if (disableFillHover) {\n        const currentValue = (ratingValue && ratingValue) || localRating\n        return hoverValue && hoverValue > currentValue ? hoverValue : currentValue\n      }\n      return (hoverValue && hoverValue) || (ratingValue && ratingValue) || localRating\n    }\n\n    return (ratingValue && ratingValue) || localRating\n  }, [allowHover, disableFillHover, hoverValue, ratingValue, localRating])\n\n  useEffect(() => {\n    if (tooltipArray.length > totalIcons) {\n      console.error('tooltipArray Array length is bigger then Icons Count length.')\n    }\n  }, [tooltipArray.length, totalIcons])\n\n  const ratingArray = useCallback(\n    (array: string[]) => {\n      return (\n        (hoverValue && array[hoverIndex]) ||\n        (ratingValue && array[valueIndex]) ||\n        (initialValue && array[localRatingIndex])\n      )\n    },\n    [hoverValue, hoverIndex, ratingValue, valueIndex, initialValue, localRatingIndex]\n  )\n\n  const ratingRenderValues = useMemo(() => {\n    return (\n      (hoverValue && renderValue(hoverValue)) ||\n      (ratingValue && renderValue(ratingValue)) ||\n      (initialValue && renderValue(localRating))\n    )\n  }, [hoverValue, renderValue, ratingValue, initialValue, localRating])\n\n  return (\n    <span className={css.starRatingWrap} style={{ direction: `${rtl ? 'rtl' : 'ltr'}` }}>\n      <span\n        className={`${css.simpleStarRating} ${className}`}\n        style={{\n          cursor: readonly ? '' : 'pointer',\n          ...style\n        }}\n        onPointerMove={readonly ? undefined : handlePointerMove}\n        onPointerEnter={readonly ? undefined : handlePointerEnter}\n        onPointerLeave={readonly ? undefined : handlePointerLeave}\n        onClick={readonly ? undefined : handleClick}\n        aria-hidden='true'\n      >\n        <span\n          className={`${css.emptyIcons} ${emptyClassName}`}\n          style={{\n            color: emptyColor,\n            ...emptyStyle\n          }}\n        >\n          {[...Array(iconsCount)].map((_, index) => (\n            <Fragment key={index}>\n              {customIcons[index]?.icon || emptyIcon || (\n                <StarIcon\n                  SVGclassName={SVGclassName}\n                  SVGstyle={SVGstyle}\n                  SVGstorkeWidth={SVGstorkeWidth}\n                  SVGstrokeColor={SVGstrokeColor}\n                  size={size}\n                />\n              )}\n            </Fragment>\n          ))}\n        </span>\n\n        <span\n          className={`${css.fillIcons} ${fillClassName}`}\n          style={{\n            [rtl ? 'right' : 'left']: 0,\n            color: ratingArray(fillColorArray) || fillColor,\n            transition: transition ? 'width .2s ease, color .2s ease' : '',\n            width: `${valuePercentage}%`,\n            ...fillStyle\n          }}\n          title={allowTitleTag ? `${ratingRenderValues} ${titleSeparator} ${iconsCount}` : undefined}\n        >\n          {[...Array(iconsCount)].map((_, index) => (\n            <Fragment key={index}>\n              {customIcons[index]?.icon || fillIcon || (\n                <StarIcon\n                  SVGclassName={SVGclassName}\n                  SVGstyle={SVGstyle}\n                  SVGstorkeWidth={SVGstorkeWidth}\n                  SVGstrokeColor={SVGstrokeColor}\n                  size={size}\n                />\n              )}\n            </Fragment>\n          ))}\n        </span>\n      </span>\n\n      {showTooltip && (\n        <span\n          className={`${css.tooltip} ${tooltipClassName}`}\n          style={{\n            [rtl ? 'marginRight' : 'marginLeft']: 20,\n            ...tooltipStyle\n          }}\n        >\n          {(tooltipArray.length > 0 ? ratingArray(tooltipArray) : ratingRenderValues) || tooltipDefaultText}\n        </span>\n      )}\n    </span>\n  )\n}\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n"],"names":["StarIcon","_a","_b","size","_c","SVGstrokeColor","_d","SVGstorkeWidth","_e","SVGclassName","SVGstyle","_jsx","className","style","stroke","fill","strokeWidth","viewBox","width","height","xmlns","jsx","d","reducer","state","action","type","__assign","hoverValue","payload","hoverIndex","index","ratingValue","valueIndex","isTouchDevice","window","matchMedia","matches","navigator","maxTouchPoints","css","ref","insertAt","document","head","getElementsByTagName","createElement","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","onClick","onPointerMove","onPointerEnter","onPointerLeave","initialValue","iconsCount","_f","_g","readonly","_h","rtl","_j","customIcons","_k","allowFraction","_l","fullFraction","_m","multiplier","_o","_p","transition","_q","allowHover","_r","disableFillHover","_s","fillIcon","_t","fillColor","_u","fillColorArray","fillStyle","_v","fillClassName","_w","emptyIcon","_x","emptyColor","emptyStyle","_y","emptyClassName","_z","allowTitleTag","_0","showTooltip","_1","tooltipDefaultText","_2","tooltipArray","tooltipStyle","_3","tooltipClassName","_4","_5","titleSeparator","_6","_7","_8","useReducer","_9","dispatch","useEffect","totalIcons","useMemo","localRating","Math","floor","round","ceil","localRatingIndex","renderValue","useCallback","value","val","handlePointerMove","event","clientX","currentTarget","children","getBoundingClientRect","left","right","positionX","currentValue","iconWidth","i","handleClick","valuePercentage","length","console","error","ratingArray","array","ratingRenderValues","_jsxs","jsxs","direction","concat","cursor","undefined","color","__spreadArray","Array","map","_","Fragment","icon","title"],"mappings":"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"}